
/*========================================================
  0.  CENTER POSITION MIXIN 
========================================================== */

	@mixin center($horizontal: true, $vertical: true) {
		position: absolute;
		@if ($horizontal and $vertical) {
			top: 50%;
			left: 50%;
			transform: translate(-50%, -50%);
		} @else if ($horizontal) {
			left: 50%;
			transform: translate(-50%, 0);
		} @else if ($vertical) {
			top: 50%;
			transform: translate(0, -50%);
		}
	}


/*========================================================
  0.  FULL-WIDTH SECTION 
========================================================== */

	// https://stackoverflow.com/questions/31391459/how-can-i-expand-a-child-div-to-100-screen-width-if-the-container-div-is-smalle
	@mixin make-full-width {
		width: calc(100vw - 10px);
		margin-left: calc(-50vw + 50%);

		@include breakpoint($mobile)  { margin-left: auto;  }
		@include breakpoint($touch)  { width: calc(100vw)  }
	}

	// https://stackoverflow.com/questions/31391459/how-can-i-expand-a-child-div-to-100-screen-width-if-the-container-div-is-smalle
	@mixin make-wide-width {
		width: 112%;
		margin-left: -6%;

		@include breakpoint($mobile)  { width: 100%; margin-left: auto;  }
	}


/*========================================================
  1.  CLEARFIX MIXIN 
========================================================== */

	@mixin clearfix {
		*zoom: 1;

		&:before, &:after {
			content: ' ';
			display: table;
		}
		&:after {
			clear: both;
		}
	}

	@mixin custom-border($position: bottom, $color: #939393) {

		@if ($position == bottom) {
			background-image: linear-gradient(to right, $color 33%, rgba(255,255,255,0) 0%);
			background-position: bottom;
			background-size: 3px 1px;
			background-repeat: repeat-x;
		} @else if ($position == top) {
			background-image: linear-gradient(to right, $color 33%, rgba(255,255,255,0) 0%);
			background-position: top;
			background-size: 3px 1px;
			background-repeat: repeat-x;
		} @else if ($position == right) {
			background-image: linear-gradient($color 33%, rgba(255,255,255,0) 0%);
			background-position: right;
			background-size: 1px 3px;
			background-repeat: repeat-y;
		} @else if ($position == left) {
			background-image: linear-gradient($color 33%, rgba(255,255,255,0) 0%);
			background-position: left;
			background-size: 1px 3px;
			background-repeat: repeat-y;
		}


	}


/*========================================================
  2.  ANIMATION AND TRANSITION MIXINS
========================================================== */


	@mixin animate-this($translate3d: '0, 15px, 0', $rotate: '0deg', $duration: '400ms') {

		/** Default State */
		opacity: 0;
		visibility: hidden;
		transform: translate3d(unquote($translate3d)) rotate(unquote($rotate));
		transition: transform unquote($duration) cubic-bezier(0.39, 0.575, 0.565, 1), opacity unquote($duration) cubic-bezier(0.39, 0.575, 0.565, 1), visibility unquote($duration) linear;

		/** Triggered State */
		&.animate-in {
		    opacity: 1;
		    visibility: visible;
		    transform: translate3d(0, 0, 0) rotate(unquote($rotate));
		}

	}

	@mixin animate-out($opacity: '0', $visibility: 'hidden', $translate3d: '0, 15px, 0', $rotate: '0deg', $duration: '400ms') {
		opacity: unquote($opacity);
		visibility: unquote($visibility);
		transform: translate3d(unquote($translate3d)) rotate(unquote($rotate));
		transition: transform unquote($duration) cubic-bezier(0.39, 0.575, 0.565, 1), opacity unquote($duration) cubic-bezier(0.39, 0.575, 0.565, 1), visibility unquote($duration) linear;
	}

	@mixin animate-in($name: 'fade-in', $delay: '0s', $index: '500') {
		opacity: 0;
		animation: unquote($name) ease 0.4s forwards;
		animation-delay: unquote($delay);
		z-index: unquote($index);
	}


/*========================================================
 3.  POSITION MIXIN 
========================================================== */


	@mixin position($position, $top: null, $right: null, $bottom: null, $left: null) {
		position: $position;
		top: $top;
		right: $right;
		bottom: $bottom;
		left: $left;
	}


// =============================================================================
// String Replace
// =============================================================================

@function str-replace($string, $search, $replace: "") {
	$index: str-index($string, $search);

	@if $index {
		@return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
	}

	@return $string;
}

// =============================================================================
// Font Face
// =============================================================================

@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {
	$src: null;

	$extmods: (
		eot: "?",
		svg: "#" + str-replace($name, " ", "_")
	);

	$formats: (
		otf: "opentype",
		ttf: "truetype"
	);

	@each $ext in $exts {
		$extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
		$format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
		$src: append($src, url(quote($path + "." + $extmod)) format(quote($format)), comma);
	}

	@font-face {
		font-family: quote($name);
		font-style: $style;
		font-weight: $weight;
		src: $src;
	}
}




	/// Returns the opposite direction of each direction in a list
	/// @author Hugo Giraudel
	/// @param {List} $directions - List of initial directions
	/// @return {List} - List of opposite directions
	@function opposite-direction($directions) {
	  $opposite-directions: ();
	  $direction-map: (
	    'top':    'bottom',
	    'right':  'left',
	    'bottom': 'top',
	    'left':   'right',
	    'center': 'center',
	    'ltr':    'rtl',
	    'rtl':    'ltr'
	  );
	 
	  @each $direction in $directions {
	    $direction: to-lower-case($direction);
	    
	    @if map-has-key($direction-map, $direction) { 
	      $opposite-directions: append($opposite-directions, unquote(map-get($direction-map, $direction)));
	    } @else {
	      @warn "No opposite direction can be found for `#{$direction}`. Direction omitted.";
	    }
	  }
	 
	  @return $opposite-directions;
	}





	/// Triangle helper mixin
	/// @param {Direction} $direction - Triangle direction, either `top`, `right`, `bottom` or `left`
	/// @param {Color} $color [currentcolor] - Triangle color 
	/// @param {Length} $size [1em] - Triangle size
	@mixin triangle($direction, $color: currentcolor, $size: 1em) {
	  @if not index(top right bottom left, $direction) {
	    @error "Direction must be either `top`, `right`, `bottom` or `left`.";
	  }

	  width: 0;
	  height: 0;
	  content: '';
	  z-index: 2;
	  border-#{opposite-direction($direction)}: ($size * 1.5) solid $color;
	  
	  $perpendicular-borders: $size solid transparent;
	  
	  @if $direction == top or $direction == bottom {
	    border-left:   $perpendicular-borders;
	    border-right:  $perpendicular-borders;
	  } @else if $direction == right or $direction == left {
	    border-bottom: $perpendicular-borders;
	    border-top:    $perpendicular-borders;
	  }
	}
